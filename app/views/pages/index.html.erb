<h1>Welcome to the homepage of my project</h1>
md`The current time is ${new Date(now).toLocaleTimeString()}.`
<p> This page allows you to calculate the sum of the numbers you enter. To do this:
<br>- Enter a number in the space provided for
<br>- Press "Add this number to the list"
<br>- Once your list is complete, press "Calculate the sum of the numbers in the list"
<br>The result will appear at the bottom of this list</p>


<p>Press "Delete this number from the list" next to the number you want to delete it 
<br>Press "Reset" to clean all numbers from the list</p>


<%= form_tag "/stage", method: "delete" do %>
  <input type="submit" value="Reset" />
<% end %>

<p>
</p>

<% Number.all.each do |nb| %>
<%= form_tag "/stage/#{nb.id}", method: "delete" do %>
  <p><%=nb.value %>
  <input type="submit" value="Delete this number from the list" />
<% end %>
</p>
<% end %>

<p>
<%= form_tag "/stage", method: "post" do %>
  <input type="float" name="value" />
  <input type="submit" value="Add this number to the list" />
<% end %>

<p>
</p>
<p>
</p>

<%= form_tag "/stage", method: "patch" do %>
  <input type="submit" value="Calculate the sum of the numbers in the list" />
<% end %>

<p>
</p>
chart = {
  const svg = d3.create("svg")
      .attr("viewBox", [0, 0, width, height]);

  const rect = svg.selectAll("g")
    .data(y01z)
    .join("g")
      .attr("fill", (d, i) => z(i))
    .selectAll("rect")
    .data(d => d)
    .join("rect")
      .attr("x", (d, i) => x(i))
      .attr("y", height - margin.bottom)
      .attr("width", x.bandwidth())
      .attr("height", 0);

  svg.append("g")
      .call(xAxis);

  function transitionGrouped() {
    y.domain([0, yMax]);

    rect.transition()
        .duration(500)
        .delay((d, i) => i * 20)
        .attr("x", (d, i) => x(i) + x.bandwidth() / n * d[2])
        .attr("width", x.bandwidth() / n)
      .transition()
        .attr("y", d => y(d[1] - d[0]))
        .attr("height", d => y(0) - y(d[1] - d[0]));
  }

  function transitionStacked() {
    y.domain([0, y1Max]);

    rect.transition()
        .duration(500)
        .delay((d, i) => i * 20)
        .attr("y", d => y(d[1]))
        .attr("height", d => y(d[0]) - y(d[1]))
      .transition()
        .attr("x", (d, i) => x(i))
        .attr("width", x.bandwidth());
  }

  function update(layout) {
    if (layout === "stacked") transitionStacked();
    else transitionGrouped();
  }

  return Object.assign(svg.node(), {update});
}
<h2><a href="/acknowledgements">Acknowledgements</a></h2>

