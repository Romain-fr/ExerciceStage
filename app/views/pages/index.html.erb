<head>

	<script src="http://d3js.org/d3.v3.min.js"></script>
	<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script>
	<script src="index.js"></script>

</head>
<body>

<h1>Welcome to the homepage of my project</h1>
<p> This page allows you to calculate the sum of the numbers you enter. To do this:
<br>- Enter a number in the space provided for
<br>- Press "Add this number to the list"
<br>- Once your list is complete, press "Calculate the sum of the numbers in the list"
<br>The result will appear at the bottom of this list</p>

<SPAN style="position: absolute; top: 80px; left: 550px">
<img class="left" src="https://compass1.org/wp-content/uploads/2015/06/Calculator_clipped_rev_1.png" width="200" height="200"/>
</SPAN>

<p>Press "Delete this number from the list" next to the number you want to delete it 
<br>Press "Reset" to clean all numbers from the list</p>


<%= form_tag "/stage", method: "delete" do %>
  <input type="submit" value="Reset" />
<% end %>

<p>
</p>

<% Number.all.each do |nb| %>
<%= form_tag "/stage/#{nb.id}", method: "delete" do %>
  <p><%=nb.value %>
  <input type="submit" value="Delete this number from the list" />
<% end %>
</p>
<% end %>

<p>
<%= form_tag "/stage", method: "post" do %>
  <input type="float" name="value" />
  <input type="submit" value="Add this number to the list" />
<% end %>

<p>
</p>
<p>
</p>

<%= form_tag "/stage", method: "patch" do %>
  <input type="submit" value="Calculate the sum of the numbers in the list" />
<% end %>

<p>
</p>
<%= scatter_chart Number.pluck(:id, :value), xtitle: "Id", ytitle: "Value" %>

<script>

	var canvas = d3.select("body")
		     .append("svg")
		     .attr("width", 500)
		     .attr("height", 500);

	var circle = canvas.append("circle")
		     .attr("cx", 250)
		     .attr("cy", 250)
		     .attr("r", 50)
		     .attr("fill", "red");

	var rect = canvas.append("rect")
		   .attr("x", 100)
		   .attr("y", 100)
		   .attr("width", 100)
		   .attr("height", 10)
		   .attr("fill", "green");

	var line = canvas.append("line")
		   .attr("x1", 0)
		   .attr("y1", 0)
		   .attr("x2", 500)
		   .attr("y2", 500)
		   .attr("stroke", "blue")
		   .attr("stroke-width", 20);

</script>

<script>

	var dataArray = [20, 200, 350, 400];
	var width = 500;
	var height = 500;

	var widthScale = d3.scale.linear()
		        .domain([0, 500])
			.range([0, width]);

	var color = d3.scale.linear()
		    .domain([0, 60])
		    .range(["red", "blue"]);

	var axis = d3.svg.axis()
		   .ticks(10)
		   .scale(widthScale);


	var canvas = d3.select("body")
		     .append("svg")
		     .attr("width", width)
		     .attr("height", height)
		     .append("g")
		     .attr("transform", "translate(20, 0)");

	var bars = canvas.selectAll("rect")
		     .data(dataArray)
		     .enter()
		     	 .append("rect")
			 .attr("width", function(d) { return widthScale(d) })
			 .attr("height", 50)
			 .attr("fill", function(d) { return color(d) })
			 .attr("y", function(d, i) { return i * 100 }); 

	canvas.append("g")
		.attr("transform", "translate(0, 400)")
		.call(axis);

</script>

<script>

	var data = [10];

	var canvas = d3.select("body")
		     .append("svg")
		     .attr("width", 500)
		     .attr("height", 500);

	var circle1 = canvas.append("circle")
			.attr("cx", 50)
			.attr("cy", 100)
			.attr("r", 25);

	circle1.transition()
		.duration(1500)
		.delay(1000)
		.attr("cx", 250)
		.attr("cy", 250)
		.each("start", function() {d3.select(this).attr("fill", "red"); })

	var circle2 = canvas.append("circle")
			.attr("cx", 200)
			.attr("cy", 200)
			.attr("r", 25);

	var circles = canvas.selectAll("circle")
		     .data(data)
		     .attr("fill", "green")
		     .exit()
	                 .attr("fill", "blue");

</script>

<script>

chart = {
  const svg = d3.create("svg")
      .attr("viewBox", [0, 0, width, height]);
  
  svg.append("g")
      .attr("fill", "steelblue")
    .selectAll("rect")
    .data(bins)
    .join("rect")
      .attr("x", d => x(d.x0) + 1)
      .attr("width", d => Math.max(0, x(d.x1) - x(d.x0) - 1))
      .attr("y", d => y(d.length))
      .attr("height", d => y(0) - y(d.length));

  svg.append("g")
      .call(xAxis);
  
  svg.append("g")
      .call(yAxis);
  
  return svg.node();
}
  height = 720
  margin = ({top: 20, right: 30, bottom: 30, left: 40})
  x = d3.scaleLinear()
    .domain(d3.extent(data, d => d.x)).nice()
    .range([margin.left, width - margin.right])
  y = d3.scaleLinear()
    .domain(d3.extent(data, d => d.y)).nice()
    .range([height - margin.bottom, margin.top])
  xAxis = g => g
    .attr("transform", `translate(0,${height - margin.bottom})`)
    .call(d3.axisBottom(x).ticks(width / 80))
    .call(g => g.select(".domain").remove())
    .call(g => g.selectAll(".tick line").clone()
        .attr("y2", -height)
        .attr("stroke-opacity", 0.1))
    .call(g => g.append("text")
        .attr("x", width - 4)
        .attr("y", -4)
        .attr("font-weight", "bold")
        .attr("text-anchor", "end")
        .attr("fill", "black")
        .text(data.x)
        .call(halo))
  yAxis = g => g
    .attr("transform", `translate(${margin.left},0)`)
    .call(d3.axisLeft(y).ticks(null, "$.2f"))
    .call(g => g.select(".domain").remove())
    .call(g => g.selectAll(".tick line").clone()
        .attr("x2", width)
        .attr("stroke-opacity", 0.1))
    .call(g => g.select(".tick:last-of-type text").clone()
        .attr("x", 4)
        .attr("text-anchor", "start")
        .attr("font-weight", "bold")
        .attr("fill", "black")
        .text(data.y)
        .call(halo))
  function halo(text) {
  text.select(function() { return this.parentNode.insertBefore(this.cloneNode(true), this); })
      .attr("fill", "none")
      .attr("stroke", "white")
      .attr("stroke-width", 4)
      .attr("stroke-linejoin", "round");
  }
  function length(path) {
  return d3.create("svg:path").attr("d", path).node().getTotalLength();
  }
  line = d3.line()
    .curve(d3.curveCatmullRom)
    .x(d => x(d.x))
    .y(d => y(d.y))
  data = {
  const data = d3.csvParse(await FileAttachment("driving.csv").text(), ({side, year, miles, gas}) => ({orient: side, name: year, x: +miles, y: +gas}));
  data.x = "Miles per person per year";
  data.y = "Cost per gallon";
  return data;
  }
  d3 = require("d3@5")  
</script>

<div id="container"></div> 
<script src="http://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"> </script> 
<script> 
var paper = Raphael("container", 500, 300); 
var dot = paper.circle(250, 150, 30).attr({ 
fill: "#FFF", 
stroke: "#000", 
"stroke-width": 1 
}); 
</script>


<h2><a href="/acknowledgements">Acknowledgements</a></h2>

<svg width="80" height="80"> 
<circle cx="40" cy="40" r="30" stroke="#000" stroke-width="1" fill="#FFF" /> 
</svg> 


<canvas id="myChart" width="400" height="400"></canvas>
<script>
var ctx = document.getElementById('myChart').getContext('2d');
var myChart = new Chart(ctx, {
    type: 'bar',
    data: {
        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
        datasets: [{
            label: '# of Votes',
            data: [12, 19, 3, 5, 2, 3],
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ],
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});
</script>

</body>
